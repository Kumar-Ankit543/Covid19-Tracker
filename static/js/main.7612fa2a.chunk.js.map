{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","total","Card","className","style","margin","CardContent","Typography","color","casesTypeColors","hex","mulitiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillOpacity","pathOptions","fillColor","radius","Math","sqrt","Popup","backgroundImage","flag","numeral","format","Map","countries","zoom","ChangeView","useMap","setView","MapContainer","scrollWheelZoom","TileLayer","url","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","name","iso3","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","class","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7612fa2a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\n\r\nfunction InfoBox({ title, cases, total }) {\r\n  return (\r\n    <Card className=\"infoBox\" style={{ margin: 3 }}>\r\n      <CardContent>\r\n        {/* title */}\r\n        <Typography className=\"infoBox__title\" color=\"textSecondary\">\r\n          {title}\r\n        </Typography>\r\n        {/* active cases */}\r\n        <h2 className=\"infoBox__cases\">{cases}</h2>\r\n        {/* total cases */}\r\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n          Total {total}\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default InfoBox;\r\n","import { Circle, Popup } from \"react-leaflet\";\r\nimport numeral from \"numeral\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    // rgb: \"rgb(204,16,52)\",\r\n    // half_op: \"rgba(204,16,52,0.5)\",\r\n    mulitiplier: 800,\r\n  },\r\n\r\n  recovered: {\r\n    hex: \"#7DD71D\",\r\n    // rgb: \"rgb(125,215,29)\",\r\n    // half_op: \"rgba(125,215,29,0.5)\",\r\n    mulitiplier: 1200,\r\n  },\r\n\r\n  deaths: {\r\n    hex: \"#C0C0C0\",\r\n    // rgb: \"rgb(251,68,67)\",\r\n    // half_op: \"rgba(251,68,67,0.5)\",\r\n    mulitiplier: 2000,\r\n  },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n  const sortedData = [...data];\r\n  sortedData.sort((a, b) => {\r\n    return b.cases - a.cases;\r\n  });\r\n  return sortedData;\r\n};\r\n\r\n// draw circles on the map\r\nexport const showDataOnMap = (data, casesType = \"cases\") => {\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      fillOpacity={0.4}\r\n      pathOptions={{\r\n        color: casesTypeColors[casesType].hex,\r\n        fillColor: casesTypeColors[casesType].hex,\r\n      }}\r\n      radius={\r\n        Math.sqrt(country[casesType] / 10) *\r\n        casesTypeColors[casesType].mulitiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          />\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n};\r\n","import React from \"react\";\r\nimport { MapContainer, TileLayer, useMap } from \"react-leaflet\";\r\nimport \"./Map.css\";\r\nimport { showDataOnMap } from \"./util\";\r\n\r\nfunction Map({ countries, casesType, center, zoom }) {\r\n  function ChangeView({ center, zoom }) {\r\n    const map = useMap();\r\n    map.setView(center, zoom);\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <MapContainer\r\n      casesType={casesType}\r\n      className=\"map\"\r\n      center={center}\r\n      zoom={zoom}\r\n      scrollWheelZoom={false}\r\n    >\r\n      <ChangeView center={center} zoom={zoom} />\r\n      <TileLayer\r\n        // attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n      />\r\n      {showDataOnMap(countries, casesType)}\r\n    </MapContainer>\r\n  );\r\n}\r\nexport default Map;\r\n","import React from \"react\";\r\nimport \"./Table.css\";\r\n\r\nfunction Table({ countries }) {\r\n  return (\r\n    <div className=\"table\">\r\n      {countries.map((country) => (\r\n        <tr>\r\n          <td>{country.country}</td>\r\n          <td>\r\n            <strong>{country.cases}</strong>\r\n          </td>\r\n        </tr>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType = \"cases\" }) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          console.log(\"data>>>>>>>>\", data);\r\n          let chartData = buildChartData(data, \"cases\");\r\n          setData(chartData);\r\n        });\r\n    };\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div>\r\n      {/* <h1>I am a chart</h1>  */}\r\n      {data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204,16,52,0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n","import { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport InfoBox from \"./InfoBox\";\nimport Map from \"./Map\";\nimport Table from \"./Table\";\nimport { sortData } from \"./util.js\";\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport LineGraph from \"./LineGraph.js\";\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState([34.80746, -40.4796]);\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  // dropDown\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso3,\n          }));\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setMapCountries(data);\n          setCountries(countries);\n        });\n    };\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n    console.log(countryCode);\n    setCountry(countryCode);\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setCountry(countryCode);\n        setCountryInfo(data);\n\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n      });\n  };\n  console.log(\"countryInfo>>>>>\", countryInfo);\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 TRACKER</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              onChange={onCountryChange}\n              value={country}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n\n        <div class=\"app__stats\">\n          {/* {infoboxes} */}\n          <InfoBox\n            title=\"Coronavirus Cases\"\n            cases={countryInfo.todayCases}\n            total={countryInfo.cases}\n          />\n          <InfoBox\n            title=\"Recovered\"\n            cases={countryInfo.todayRecovered}\n            total={countryInfo.recovered}\n          />\n          <InfoBox\n            title=\"Deaths\"\n            cases={countryInfo.todayDeaths}\n            total={countryInfo.deaths}\n          />\n        </div>\n        {/* {map} */}\n        <Map countries={mapCountries} center={mapCenter} zoom={mapZoom} />\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          {/* {table} */}\n          <h3>Live Cases by Country</h3>\n          <Table countries={tableData} />\n          <h3>Worldwide New Cases</h3>\n          {/* {graph} */}\n          <LineGraph />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}